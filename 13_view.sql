-- 테이블: 실제   ||||   뷰: 가상   삭제 생성이 간단하다
-- 뷰는 테이블 같이 쓰지는 못함
/*
view는 제한적인 자료만 보기 위해 사용하는 가상 테이블의 개념입니다.
뷰는 기본 테이블로 유도된 가상 테이블이기 때문에
필요한 컬럼만 저장해 두면 관리가 용이해 집니다.
뷰는 가상테이블로 실제 데이터가 물리적으로 저장된 형태는 아닙니다.
뷰를 통해서 데이터에 접근하면 원본 데이터는 안전하게 보호될 수 있습니다.
*/

--프롬절에 들어가는 서브쿼리를 인라인뷰

SELECT * FROM user_sys_privs;-- 권한을 확인하는 용도 

-- 단순 뷰: 하나의 테이블을 이용하여 생성한 뷰
-- 뷰의 컬럼 이름은 함수 호출문, 연산식 등 같은 가상 표현식이면 안됩니다.
SELECT
    employee_id,
    --first_name || ' ' || last_name,
    job_id,
    salary
FROM employees
WHERE department_id = 60;
DROP VIEW view_emp;

CREATE VIEW view_emp AS (
    SELECT
    employee_id,
    first_name || ' ' || last_name AS full_name, 
    -- 새로운 열은 별칭을 만들어 주어야 한다.
    job_id,
    salary
    FROM employees
    WHERE department_id = 60
);

SELECT * FROM view_emp
WHERE salary >= 6000;

-- 복합뷰
-- 여러 테이블을 조인하여 필요한 데이터만 저장하고 빠른 확인을 위해 사용.
CREATE VIEW view_emp_dept_jobs AS (
    SELECT
        e.employee_id,
        first_name || ' ' || last_name AS full_name, 
        d.department_name,
        j.job_title
    FROM employees e
    LEFT JOIN departments d
    ON e.department_id = d.department_id
    LEFT JOIN jobs j
    ON e.job_id = j.job_id
    
)
ORDER BY employee_id ASC;

SELECT * FROM view_emp_dept_jobs;

-- VIEW의 수정 ( CREATE OR REPLACE VIEW 구문 )
-- 동일 이름으로 해당 구문을 사용하면 데이터가 변경되면서 새롭게 생성됩니다.
-- 이름이 있으면 새로 만들어지고 원래 이름이 있으면 교체가 된다
CREATE OR REPLACE VIEW view_emp_dept_jobs AS (
    SELECT
        e.employee_id,
        first_name || ' ' || last_name AS full_name, 
        d.department_name,
        j.job_title,
        e.salary -- 추가
    FROM employees e
    LEFT JOIN departments d
    ON e.department_id = d.department_id
    LEFT JOIN jobs j
    ON e.job_id = j.job_id
)
ORDER BY employee_id ASC;

SELECT * FROM view_emp_dept_jobs;

SELECT
    job_title,
    AVG(salary) AS avg
FROM view_emp_dept_jobs
GROUP BY job_title
ORDER BY AVG(salary) DESC; -- SQL 구문이 확실히 짧아짐.

-- 뷰 삭제
DROP VIEW view_emp;


/*
    VIEW에 INSERT가 일어나는 경우 실제 테이블에도 반영이 됩니다.
    그래서 VIEW의 INSERT, UPDATE, DELETE는 많은 제약 사항이 따릅니다.
    원본 테이블이 NOT NULL인 경우 VIEW에 INSERT가 불가능합니다.
    VIEW에서 사용하는 컬럼이 가상열인 경우에도 안됩니다.
*/

-- 두 번째 컬럼인 'full name'은 가상열(virtual column)이기 때문에 insert 안됩니다.
INSERT INTO view_emp_dept_jobs
VALUES(300, 'test', 'test', 'test', 10000); -- 안됨
-- 첫번째 'test'는 가상의 열에는 insert, update, delete 사용 못한다.
-- 첫번째 'test' = first_name || ' ' || last_name AS full_name

-- 여러개가 조인된 뷰는 한번에 insert되지 않음
-- JOIN된 뷰의 경우 한번에 수정할 수 없습니다.
INSERT INTO view_emp_dept_jobs
(employee_id, department_name, job_title, salary)
VALUES(300, 'test', 'test', 10000); -- 안됨

-- 원본 테이블의 null을 허용하지 않는 컬럼 때문에 들어갈 수 없습니다.
INSERT INTO view_emp
(employee_id, job_id, salary)
VALUES(300, 'test', 10000); -- 안됨

-- 103번을 쳐다보는 포인티가 있어서 지울수가 없다 (제약이 있음)
-- 107번은 됨
DELETE FROM view_emp
WHERE employee_id = 103; -- 안됨

-- 삽입, 수정, 삭제 성공시 원본 테이블이 삽입, 수정, 삭제된다 조심해야 한다.
-- 삽입, 수정, 삭제 성공시 원본 테이블도 반영됩니다.
DELETE FROM view_emp
WHERE employee_id = 107;

SELECT * FROM view_emp;
SELECT * FROM employees;
ROLLBACK;

-- WITH CHECK OPTION -> 조건 제약 컬럼
-- 뷰를 생성할 때 사용한 조건 컬럼은 뷰를 통해서 변경할 수 없게 해주는 키워드

CREATE OR REPLACE VIEW view_emp_test AS (
    SELECT
    employee_id,
    first_name,
    last_name,
    email,
    hire_date,
    job_id,
    department_id
    FROM employees
    WHERE department_id = 60
)
WITH CHECK OPTION CONSTRAINT view_emp_test_ck;
-- WITH CHECK OPTION 테이블 값 변경 못하게 함 에러 생김
UPDATE view_emp_test
SET department_id = 100
WHERE employee_id = 107;

UPDATE view_emp_test
SET job_id = 'AD_VP'
WHERE employee_id = 107; -- JOB_ID에 있는 단어만 변경 가능

SELECT * FROM view_emp_test;

-- 읽기 전용 뷰 -> WITH READ ONLY (DML 연산을 막음 -> SELECT만 허용)
CREATE OR REPLACE VIEW view_emp_test AS (
    SELECT
    employee_id,
    first_name,
    last_name,
    email,
    hire_date,
    job_id,
    department_id
    FROM employees
    WHERE department_id = 60
)
WITH READ ONLY;


